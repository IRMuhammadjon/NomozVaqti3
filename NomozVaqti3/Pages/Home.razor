@page "/"
@inject IJSRuntime JSRuntime


<MudText Align="Align.Center">@location</MudText>
<MudTable Items="@NomozVaqtlari" Hover="true" Breakpoint="Breakpoint.None" Loading="@_loading" LoadingProgressColor="Color.Info">
    <RowTemplate>
        <MudTd DataLabel="Icon">
            <MudIcon Icon="@context.Icon" Color="Color.Primary" />
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Time">@context.Time</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private bool _loading = true;
    private List<Nomozvaqtlari> NomozVaqtlari = new();
    private string Latitude { get; set; } = "";
    private string Longitude { get; set; } = "";
    private string location { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            // Foydalanuvchi lokatsiyasini olish
            var userLocation = await JSRuntime.InvokeAsync<GeolocationCoordinates>("getLocation");
            Latitude = userLocation.Latitude.ToString();
            Longitude = userLocation.Longitude.ToString();

            var apiResponse = await GetPrayerTimesAsync(Latitude, Longitude);

            if (apiResponse != null)
            {
                NomozVaqtlari = new List<Nomozvaqtlari>
                {
                    new Nomozvaqtlari { Name = "Fajr", Time = apiResponse.Fajr, Icon = Icons.Material.Filled.Brightness5 },
                    new Nomozvaqtlari { Name = "Dhuhr", Time = apiResponse.Dhuhr, Icon = Icons.Material.Filled.WbSunny },
                    new Nomozvaqtlari { Name = "Asr", Time = apiResponse.Asr, Icon = Icons.Material.Filled.Brightness5 },
                    new Nomozvaqtlari { Name = "Maghrib", Time = apiResponse.Maghrib, Icon = Icons.Material.Filled.Brightness4 },
                    new Nomozvaqtlari { Name = "Isha", Time = apiResponse.Isha, Icon = Icons.Material.Filled.NightsStay }
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prayer times: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task<PrayerTimes?> GetPrayerTimesAsync(string latitude, string longitude)
    {
        using var client = new HttpClient();
        string url = $"https://api.aladhan.com/v1/timings?latitude={latitude}&longitude={longitude}&method=2";

        try
        {
            var response = await client.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (result?.Data?.Meta?.Timezone != null)
                {
                    location = result.Data.Meta.Timezone; 
                }

                return result?.Data?.Timings;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching API data: {ex.Message}");
        }

        return null;
    }

    private class ApiResponse
    {
        public Data? Data { get; set; }
    }

    private class Data
    {
        public PrayerTimes? Timings { get; set; }
        public Meta? Meta { get; set; }
    }

    private class Meta
    {
        public string Timezone { get; set; } = "";
    }

    private class PrayerTimes
    {
        public string Fajr { get; set; } = "";
        public string Dhuhr { get; set; } = "";
        public string Asr { get; set; } = "";
        public string Maghrib { get; set; } = "";
        public string Isha { get; set; } = "";
    }

    private class Nomozvaqtlari
    {
        public string Name { get; set; } = "";
        public string Time { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    private class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
